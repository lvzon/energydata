from pandas import Series, DataFrame
import pandas as pd

def load_co2highlights():
	
	''' 
	Load data tables from the freely available IEA CO2 Highlights 
	dataset, which is made available by the International Energy Agency
	at: https://www.iea.org/media/statistics/CO2Highlights.xls

	This function returns a dictionary of DataFrames, one table per 
	variable, for the following variables:

	   - Population
	   - Total Primary Energy Supply (TPES) in TWh
	   - Total Primary Energy Supply (TPES) in kWh
	   - Total Primary Energy Supply (TPES) in kWh per person

	The DataFrames in turn contain timeseries for a number of countries.
	'''
	
	# Source: https://www.iea.org/media/statistics/CO2Highlights.xls
	file_ieaco2 = pd.ExcelFile('CO2Highlights.xls')

	table_ieapop = file_ieaco2.parse('POP', header=1, skiprows=2, na_values='..').set_index('millions').drop(['Region/Country/Economy']).apply(pd.to_numeric, errors='coerce')
	table_ieatpes = file_ieaco2.parse('TPES Mtoe', header=1, skiprows=2, na_values='..').set_index('million tonnes of oil equivalent').drop(['Region/Country/Economy']).apply(pd.to_numeric, errors='coerce')
	
	kWh_per_Mtoe = 11630000000
	TWh_per_Mtoe = 11.6300000

	table_ieapop.index = table_ieapop.index.str.strip()
	table_ieatpes.index = table_ieatpes.index.str.strip()

	pop = table_ieapop * 1e6
	tpes_kwh = table_ieatpes * kWh_per_Mtoe
	tpes_twh = table_ieatpes * TWh_per_Mtoe
	tpes_kwh_person = tpes_kwh / pop

	tables = {'population': pop, 'TPES_kWh': tpes_kwh, 'TPES_TWh': tpes_twh, 'TPES_KWh_per_person': tpes_kwh_person}

	return tables

def select_year (tables, year):

	''' 
	This function takes as input the dictionary of DataFrames
	generated by load_co2highlights(), and outputs a new dictionary
	with country-data for a given year, for the following variables:

	   - Population
	   - Total Primary Energy Supply (TPES) in TWh
	   - Total Primary Energy Supply (TPES) in kWh
	   - Total Primary Energy Supply (TPES) in kWh per person
	   - Total Primary Energy Supply (TPES) in TWh per day
	   - Total Primary Energy Supply (TPES) in kWh per day
	   - Total Primary Energy Supply (TPES) in kWh per person per day
	'''

	import calendar
	days = 366 if calendar.isleap(year) else 365

	pop = tables['population']
	tpes_twh = tables['TPES_TWh']
	tpes_kwh = tables['TPES_kWh']
	tpes_kwh_person = tables['TPES_KWh_per_person']
	
	pop = pop[:][year].dropna()
	tpes_twh = tpes_twh[:][year].dropna()
	tpes_twh_day = tpes_twh / days
	tpes_kwh = tpes_kwh[:][year].dropna()
	tpes_kwh_day = tpes_kwh / days
	tpes_kwh_person = tpes_kwh_person[:][year].dropna()
	tpes_kwh_person_day = tpes_kwh_person / days
	
	tables = {'population': pop, 'TPES_kWh': tpes_kwh, 'TPES_TWh': tpes_twh, 'TPES_KWh_per_person': tpes_kwh_person, 'TPES_kWh_per_day': tpes_kwh_day, 'TPES_TWh_per_day': tpes_twh_day, 'TPES_KWh_per_person_per_day': tpes_kwh_person_day}

	return tables


def load_headline_energy_timeseries(filename = 'IEA_HeadlineEnergyData_2017.xlsx', table = 'TimeSeries_1971-2016'):
	
	''' 
	Load data tables from the freely available IEA Headline Energy 
	dataset, which is made available annually by the International Energy Agency
	at e.g.: https://www.iea.org/media/statistics/IEA_HeadlineEnergyData_2017.xlsx

	This function returns the "TimeSeries"-table, with a 3-level hierarchial 
	row-index consisting of the country, the energy product 
	(e.g. "Coal, peat and oil shale" ) and the flow associalted with 
	that product (e.g. "Total final consumption (ktoe)").
	
	The columns contain the years (e.g. 1971 through 2016).
	'''
	
	file_ieahed = pd.ExcelFile(filename)
	table_ieahed = file_ieahed.parse(table, header=1).set_index(['Country', 'Product', 'Flow'])	
	table_ieahed.index = table_ieahed.index.str.strip()
	
	return table_ieahed.drop(['NoCountry', 'NoProduct', 'NoFlow'], axis=1)
	
	
def get_ktoe_flow_as_kwh_per_person(table_ieahed, flow, poptable):
	
	''' 
	Select an energy flow in kilotonnes oil equivalent 
	(e.g. 'Total primary energy supply (ktoe)') from the IEA Headline 
	Energy Data table generated by load_headline_energy_timeseries(),
	and return a table for this energy flow in kWh/person.
	
	The poptable argument is the 'population' table returned by
	load_co2highlights().
	'''
	
	kWh_per_ktoe = 11630000
	
	pop = poptable.dropna().apply(pd.to_numeric, errors='coerce')
	pop.index.name = "Country"
	
	flowtable_ktoe = table_ieahed.xs(flow, level='Flow').apply(pd.to_numeric, errors='coerce')
	flowtable_kwh = flowtable_ktoe * kWh_per_ktoe
	
	return flowtable_kwh / pop


def get_ktoe_flow_as_twh(table_ieahed, flow):
	
	''' 
	Select an energy flow in kilotonnes oil equivalent 
	(e.g. 'Total primary energy supply (ktoe)') from the IEA Headline 
	Energy Data table generated by load_headline_energy_timeseries(),
	and return a table for this energy flow in TWh.
	'''
	
	TWh_per_Mtoe = 11.6300000
	
	flowtable_ktoe = table_ieahed.xs(flow, level='Flow').apply(pd.to_numeric, errors='coerce')
	flowtable_twh = flowtable_ktoe * TWh_per_ktoe
	
	return flowtable_TWh


def get_headline_energy_year(table_ieahed, year):
	
	yeartable = table_ieahed[:][year].unstack()
	
	import calendar
	days = 366 if calendar.isleap(year) else 365

	perdaytable = yeartable / days
	
	return yeartable, perdaytable


def add_net_oil_products(yeartable):
	
	yeartable['Net oil products'] = yeartable['Crude,NGL and feedstocks'] + yeartable['Oil products']
	return yeartable

	
def get_product_subset(yeartable):
	
	product_subset = ['Net oil products', 'Coal, peat and oil shale', 'Natural gas', 'Nuclear', 'Renewables and waste', 'Electricity']
	return add_net_oil_products(yeartable).sort_values(ascending=True, by='Total')[product_subset]


def get_product_subset_colormap(yeartable):
	
	from itertools import cycle, islice
	colormap = list(islice(cycle(["#000000", "#E69F00", "#56B4E9", "#F0E442", "#009E73", "#CC79A7"]), None, len(yeartable)))
	return colormap
